/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Aeroportos;

import InterfaceGrafica.PlaceholderTextField;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import tp.Aeroporto;
import tp.CriaArquivo;
import tp.DescricaoVoo;
import tp.FaltaObjetosException;

/**
 *
 * @author Dener
 */
public class Aeroportos extends javax.swing.JInternalFrame {

    /**
     * Creates new form Aeroportos
     * @param JDP
     */
    
    
    public Aeroportos(JDesktopPane JDP) {
        initComponents();
        
        dlm = new DefaultListModel();
        
        jList1.setModel(dlm);
        jList1.setFocusCycleRoot(true);
        this.painelDesktop = JDP;
        
        this.notFound.setVisible(false);
        
        Aeroportos.listaAeroportos = new LinkedList<>();
        Aeroportos.listaAtualizada();
        Aeroportos.atualizaLista();
        
        
        botoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        botaoPesquisarAeroportos = new javax.swing.JButton();
        aeroportosPesquisaTxt = new javax.swing.JTextField();
        addAeroportos = new javax.swing.JButton();
        removerAeroportos = new javax.swing.JButton();
        editarAeroportos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        notFound = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Aeroportos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        botaoPesquisarAeroportos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/magnifier.png"))); // NOI18N
        botaoPesquisarAeroportos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarAeroportosActionPerformed(evt);
            }
        });

        addAeroportos.setText("Novo");
        addAeroportos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAeroportosActionPerformed(evt);
            }
        });

        removerAeroportos.setText("Remover");
        removerAeroportos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAeroportosActionPerformed(evt);
            }
        });

        editarAeroportos.setText("Editar");
        editarAeroportos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarAeroportosActionPerformed(evt);
            }
        });

        DefaultListModel modelo = new DefaultListModel();
        jList1.setModel(modelo);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jList1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jList1FocusGained(evt);
            }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Pesquisar por ID:");

        notFound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons 1/error.png"))); // NOI18N
        notFound.setText("Aeroporto não encontrado");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(notFound)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(aeroportosPesquisaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(botaoPesquisarAeroportos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(addAeroportos)
                            .addGap(89, 89, 89)
                            .addComponent(editarAeroportos)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removerAeroportos))))
                .addGap(89, 89, 89))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(aeroportosPesquisaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoPesquisarAeroportos))
                .addGap(1, 1, 1)
                .addComponent(notFound)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAeroportos)
                    .addComponent(removerAeroportos)
                    .addComponent(editarAeroportos))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 485, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        botoes();
    }//GEN-LAST:event_jList1ValueChanged

    private void addAeroportosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAeroportosActionPerformed
        // TODO add your handling code here:
        
        NovoAeroporto NA = new NovoAeroporto(painelDesktop);
        painelDesktop.add(NA);
        NA.setVisible(true);
        int alinhamentoWidth = (painelDesktop.getSize().width - NA.getSize().width ) / 2;
        int alinhamentoHeight = (painelDesktop.getSize().height - NA.getSize().height ) / 2;
        NA.setLocation(alinhamentoWidth, alinhamentoHeight);
        
        // 
    }//GEN-LAST:event_addAeroportosActionPerformed

    private void removerAeroportosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAeroportosActionPerformed
        int index = jList1.getSelectedIndex(); 
        int tamanho = dlm.getSize();
        
        String id = listaAeroportos.get(index).getId();
        
        if(0 !=  JOptionPane.showConfirmDialog(null, 
                "Um aeroporto será removido do sistema.\n Deseja continuar? ", 
                "Remover aeroporto", 
                JOptionPane.YES_NO_OPTION
        )) {
            return;
        }
        
        dlm.remove(index); 
        listaAeroportos.remove(index);
        
        if(index == tamanho-1) {
            index--;
        }
        jList1.setSelectedIndex(index);
        jList1.ensureIndexIsVisible(index);
        
        try {
            Aeroportos.removeAeroporto(id);
        } catch (IOException ex) {
            Logger.getLogger(Aeroportos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FaltaObjetosException ex) {
            Logger.getLogger(Aeroportos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Aeroportos.listaAtualizada();
        Aeroportos.atualizaLista();
        
    }//GEN-LAST:event_removerAeroportosActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if(evt.getClickCount() == 2) {
            Aeroporto a = Aeroportos.listaAeroportos.get(jList1.getSelectedIndex());
            VerAeroportos VA = new VerAeroportos(a.getNome(), a.getCidade(), a.getId());
            int alinhamentoWidth = (painelDesktop.getSize().width - VA.getSize().width ) / 2;
            int alinhamentoHeight = (painelDesktop.getSize().height - VA.getSize().height ) / 2;
            VA.setLocation(alinhamentoWidth, alinhamentoHeight);
            painelDesktop.add(VA);
            VA.setVisible(true);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void botaoPesquisarAeroportosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarAeroportosActionPerformed
        
        if(Aeroporto.lista_aeroporto.containsKey( aeroportosPesquisaTxt.getText() )) {
            
            dlm.removeAllElements();
            dlm.addElement(Aeroporto.lista_aeroporto.get( aeroportosPesquisaTxt.getText() ).getId() 
                + " - " 
                + Aeroporto.lista_aeroporto.get( aeroportosPesquisaTxt.getText() ).getNome());
            
            Aeroportos.listaAtualizada(Aeroporto.lista_aeroporto.get( aeroportosPesquisaTxt.getText() ));
            
            this.notFound.setVisible(false);
            
        } else {
            
            dlm.removeAllElements();
            this.notFound.setVisible(true);
        }
        
    }//GEN-LAST:event_botaoPesquisarAeroportosActionPerformed

    private void jList1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jList1FocusGained
       
        this.notFound.setVisible(false);
        if(aeroportosPesquisaTxt.getText().equals("")) {
            Aeroportos.listaAtualizada();
            Aeroportos.atualizaLista();
        } 
        

    }//GEN-LAST:event_jList1FocusGained

    private void editarAeroportosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarAeroportosActionPerformed
    
        int index = jList1.getSelectedIndex();
        
        NovoAeroporto NA = new NovoAeroporto(painelDesktop, index);
        painelDesktop.add(NA);
        NA.setVisible(true);
        int alinhamentoWidth = (painelDesktop.getSize().width - NA.getSize().width ) / 2;
        int alinhamentoHeight = (painelDesktop.getSize().height - NA.getSize().height ) / 2;
        NA.setLocation(alinhamentoWidth, alinhamentoHeight);
        
        NA.setNomeCidadeCodigo(listaAeroportos.get(index).getNome(), listaAeroportos.get(index).getCidade(), listaAeroportos.get(index).getId());
        
        
        
    }//GEN-LAST:event_editarAeroportosActionPerformed
   
    private void botoes() {
        if(dlm.getSize() == 0 || jList1.getSelectedIndex() == -1) {
            removerAeroportos.setEnabled(false);
            editarAeroportos.setEnabled(false);
        } else {
            removerAeroportos.setEnabled(true);
            editarAeroportos.setEnabled(true);
        }
    }
    
    public static void listaAtualizada() {
        Aeroportos.listaAeroportos.clear();
        try {
            Aeroporto.lista_aeroporto = Aeroporto.getLista( CriaArquivo.read("aeroporto") );
        } catch (IOException ex) {
            Logger.getLogger(Aeroportos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Aeroportos.listaAeroportos.addAll(Aeroporto.lista_aeroporto.values());
        
    }
    
    public static void listaAtualizada(Aeroporto a) {
        Aeroportos.listaAeroportos.clear();
        Aeroportos.listaAeroportos.add(a);
    }
    
    public static void atualizaLista() {
        try {
            Aeroporto.lista_aeroporto = Aeroporto.getLista( CriaArquivo.read("aeroporto") );
            //Aeroportos.listaAeroportos.clear();
            //Aeroportos.listaAeroportos.addAll(Aeroporto.lista_aeroporto.values());
        } catch (IOException ex) {
            Logger.getLogger(Aeroportos.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        dlm.removeAllElements();
        
        listaAeroportos.forEach((aero) -> {
            dlm.addElement(aero.getId() + " - " + aero.getNome());
        });
        
    }
    
    public static void removeAeroporto(String id) throws IOException, FaltaObjetosException{
        
        if(!Aeroporto.lista_aeroporto.containsKey(id))
            throw new FaltaObjetosException("O id não existe");
        
        else{
            try {
                CriaArquivo.deleteOne("aeroporto", id, 3, 2); 
            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
            } 
                        
            DescricaoVoo.lista_descricaoVoo.entrySet().forEach((entry) -> {
                if(entry.getValue().getOrigem() != null){
                    if(entry.getValue().getOrigem().getId().equals(id)){
                        entry.getValue().setOrigem(null);
                        try {
                            CriaArquivo.update("descricao_voo", id, 1);
                        } catch (FileNotFoundException e) {
                            System.out.println(e.getMessage());
                        } catch (IOException ex) {
                            System.out.println(ex.getMessage());
                        }
                    }   
                }    
            });
            
        
            
            DescricaoVoo.lista_descricaoVoo.entrySet().forEach((entry) -> {
                
                if(entry.getValue().getDestino() != null){
                    if(entry.getValue().getDestino().getId().equals(id)){
                        entry.getValue().setDestino(null);
                        try {
                            CriaArquivo.update("descricao_voo", id, 0);
                        } catch (FileNotFoundException e) {
                            System.out.println(e.getMessage());
                        } catch (IOException ex) {
                            System.out.println(ex.getMessage());
                        }
                    }
                }
            });
            
            Aeroporto.lista_aeroporto.remove(id);                
            CriaArquivo.deleteOne("aeroporto", id, 3, 2);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAeroportos;
    private javax.swing.JTextField aeroportosPesquisaTxt;
    private javax.swing.JButton botaoPesquisarAeroportos;
    private javax.swing.JButton editarAeroportos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel notFound;
    private javax.swing.JButton removerAeroportos;
    // End of variables declaration//GEN-END:variables
    private static DefaultListModel dlm;
    private JDesktopPane painelDesktop;
    private PlaceholderTextField placeholder;
    private HashMap<String, Aeroporto> aeroporto;
    public static LinkedList<Aeroporto> listaAeroportos;
}